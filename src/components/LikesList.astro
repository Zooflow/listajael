---
// No necesitamos importar nada aquí, ya que la lógica de carga se maneja en el cliente
---

<div class="likes-container">
  <div class="likes-list grid md:grid-cols-2 lg:grid-cols-3 gap-4">
    <!-- Los elementos se cargarán dinámicamente con JavaScript -->
    <div id="likes-placeholder" class="text-center w-full col-span-full text-gray-400">
      Cargando...
    </div>
  </div>
  
  <div class="mt-8 text-center">
    <div class="flex justify-center mb-4">
      <input 
        type="text" 
        id="new-like-input" 
        class="bg-white/20 border border-white rounded-l px-4 py-2 focus:outline-none text-white w-64" 
        placeholder="Agregar algo que te gusta...">
      <button 
        id="add-like-btn" 
        class="bg-red-800 hover:bg-red-700 text-white px-4 py-2 rounded-r">
        Agregar
      </button>
    </div>
  </div>
</div>

<script>
  import { getLikes, addLike, deleteLike } from '../jsonbin/client';
  
  // Elementos del DOM
  const likesList = document.querySelector('.likes-list');
  const placeholder = document.getElementById('likes-placeholder');
  const newLikeInput = document.getElementById('new-like-input');
  const addLikeBtn = document.getElementById('add-like-btn');
  
  // Función para cargar la lista de likes
  async function loadLikes() {
    try {
      const likes = await getLikes();
      
      // Limpiar placeholder
      if (placeholder) {
        placeholder.style.display = likes.length > 0 ? 'none' : 'block';
        if (likes.length == 0) {
          placeholder.textContent = 'No hay elementos aún. ¡Agrega el primero!';
        }
      }
      
      // Eliminar elementos antiguos (excepto el placeholder)
      const oldItems = likesList?.querySelectorAll('.like-item');
      oldItems?.forEach(item => item.remove());
      
      // Agregar nuevos elementos
      likes.forEach(like => {
        addLikeToDOM(like);
      });
    } catch (error) {
      console.error('Error cargando likes:', error);
      if (placeholder) {
        placeholder.textContent = 'Error al cargar los elementos. Intenta de nuevo más tarde.';
      }
    }
  }
  
  // Función para agregar un elemento al DOM
  function addLikeToDOM(like) {
    if (!likesList) return;
    
    const likeElement = document.createElement('div');
    likeElement.className = 'like-item bg-white/10 rounded-lg p-4 shadow-md hover:bg-white/20 transition-colors';
    likeElement.dataset.id = like.id;
    
    likeElement.innerHTML = `
      <div class="flex justify-between items-start">
        <p class="text-white">${like.text}</p>
        <button class="delete-like-btn text-gray-400 hover:text-red-500">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
          </svg>
        </button>
      </div>
    `;
    
    const deleteBtn = likeElement.querySelector('.delete-like-btn');
    deleteBtn?.addEventListener('click', async () => {
      try {
        await deleteLike(like.id);
        likeElement.remove();
        
        // Mostrar el placeholder si no hay elementos
        const items = likesList.querySelectorAll('.like-item');
        if (items.length === 0 && placeholder) {
          placeholder.style.display = 'block';
          placeholder.textContent = 'No hay elementos aún. ¡Agrega el primero!';
        }
      } catch (error) {
        console.error('Error eliminando el like:', error);
        alert('Error al eliminar el elemento. Intenta de nuevo.');
      }
    });
    
    likesList.appendChild(likeElement);
  }
  
  // Función para agregar un nuevo like
  async function handleAddLike() {
    if (!newLikeInput) return;
    
    const text = newLikeInput.value.trim();
    if (!text) return;
    
    try {
      const newLike = await addLike(text);
      addLikeToDOM(newLike);
      newLikeInput.value = '';
      
      // Ocultar el placeholder si estaba visible
      if (placeholder) {
        placeholder.style.display = 'none';
      }
    } catch (error) {
      console.error('Error agregando like:', error);
      alert('Error al agregar el elemento. Intenta de nuevo.');
    }
  }
  
  // Función para inicializar los eventos
function initEvents() {
  console.log("Inicializando eventos de likes");
  
  if (!likesList) {
    console.error("No se encontró el contenedor de la lista de likes");
    return;
  }
  if (!addLikeBtn) {
    console.error("No se encontró el botón para agregar likes");
    return;
  }
  if (!newLikeInput) {
    console.error("No se encontró el input para nuevos likes");
    return;
  }

  // Cargar likes
  loadLikes();
  
  // Agregar evento al botón
  addLikeBtn.addEventListener('click', handleAddLike);
  
  // Agregar evento al input
  newLikeInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleAddLike();
    }
  });
  
  console.log("Eventos de likes inicializados correctamente");
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', initEvents);

// Inicializar también inmediatamente por si se carga después del evento DOMContentLoaded
if (document.readyState === 'complete' || document.readyState === 'interactive') {
  setTimeout(initEvents, 100);
}
</script>